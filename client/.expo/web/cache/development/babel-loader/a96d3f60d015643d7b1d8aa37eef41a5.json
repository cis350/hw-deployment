{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar axios = require('axios');\n\nvar rootURL = 'http://localhost:10000';\nexport function addUser(name) {\n  return _regeneratorRuntime.async(function addUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (name) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new Error('invalid username');\n\n        case 2:\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(axios.post(rootURL + \"/login\", name));\n\n        case 5:\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](2);\n          throw _context.t0;\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 7]], Promise);\n}\nexport function updateBest(name, bestScore) {\n  return _regeneratorRuntime.async(function updateBest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (name) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new Error('invalid user');\n\n        case 2:\n          _context2.prev = 2;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(axios.put(rootURL + \"/user\", name, bestScore));\n\n        case 5:\n          _context2.next = 10;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](2);\n          throw _context2.t0;\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[2, 7]], Promise);\n}\nexport function deleteUser(name) {\n  return _regeneratorRuntime.async(function deleteUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (name) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new Error('invalid deletion');\n\n        case 2:\n          _context3.prev = 2;\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(axios.delete(rootURL + \"/delete\", name));\n\n        case 5:\n          _context3.next = 10;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](2);\n          throw _context3.t0;\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[2, 7]], Promise);\n}\nexport function getTopUsers() {\n  var response;\n  return _regeneratorRuntime.async(function getTopUsers$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(axios.get(rootURL + \"/leaders\"));\n\n        case 3:\n          response = _context4.sent;\n          return _context4.abrupt(\"return\", response.data.data);\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          throw _context4.t0;\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function getBestScore(name) {\n  var response;\n  return _regeneratorRuntime.async(function getBestScore$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (name) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new Error('invalid user');\n\n        case 2:\n          _context5.prev = 2;\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(axios.get(rootURL + \"/user-best-score\", name));\n\n        case 5:\n          response = _context5.sent;\n          return _context5.abrupt(\"return\", response.data.data);\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](2);\n          throw _context5.t0;\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[2, 9]], Promise);\n}\nexport function getBestUser() {\n  var response;\n  return _regeneratorRuntime.async(function getBestUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(axios.get(rootURL + \"/best-user\"));\n\n        case 3:\n          response = _context6.sent;\n          return _context6.abrupt(\"return\", response.data.data);\n\n        case 7:\n          _context6.prev = 7;\n          _context6.t0 = _context6[\"catch\"](0);\n          throw _context6.t0;\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function getQuestions() {\n  var response;\n  return _regeneratorRuntime.async(function getQuestions$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap(axios.get(rootURL + \"/questions\"));\n\n        case 3:\n          response = _context7.sent;\n          return _context7.abrupt(\"return\", response.data.data);\n\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](0);\n          throw _context7.t0;\n\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}","map":{"version":3,"sources":["/Users/jiwonkang/Documents/Github/cis350/hw5-backend-jiwon-ethan-1/client/modules/api.js"],"names":["axios","require","rootURL","addUser","name","Error","post","updateBest","bestScore","put","deleteUser","delete","getTopUsers","get","response","data","getBestScore","getBestUser","getQuestions"],"mappings":";;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,OAAO,GAAG,wBAAhB;AAGA,OAAO,SAAeC,OAAf,CAAuBC,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cACAA,IADA;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAIC,KAAJ,CAAU,kBAAV,CAFH;;AAAA;AAAA;AAAA;AAAA,2CAMGL,KAAK,CAACM,IAAN,CAAcJ,OAAd,aAA+BE,IAA/B,CANH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,OAAO,SAAeG,UAAf,CAA0BH,IAA1B,EAAgCI,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,cACAJ,IADA;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAIC,KAAJ,CAAU,cAAV,CAFH;;AAAA;AAAA;AAAA;AAAA,2CAMGL,KAAK,CAACS,GAAN,CAAaP,OAAb,YAA6BE,IAA7B,EAAmCI,SAAnC,CANH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP,OAAO,SAAeE,UAAf,CAA0BN,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,cACAA,IADA;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAIC,KAAJ,CAAU,kBAAV,CAFH;;AAAA;AAAA;AAAA;AAAA,2CAMGL,KAAK,CAACW,MAAN,CAAgBT,OAAhB,cAAkCE,IAAlC,CANH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYP,OAAO,SAAeQ,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEoBZ,KAAK,CAACa,GAAN,CAAaX,OAAb,cAFpB;;AAAA;AAEGY,UAAAA,QAFH;AAAA,4CAGIA,QAAQ,CAACC,IAAT,CAAcA,IAHlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAeC,YAAf,CAA4BZ,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACAA,IADA;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAIC,KAAJ,CAAU,cAAV,CAFH;;AAAA;AAAA;AAAA;AAAA,2CAMoBL,KAAK,CAACa,GAAN,CAAaX,OAAb,uBAAwCE,IAAxC,CANpB;;AAAA;AAMGU,UAAAA,QANH;AAAA,4CAOIA,QAAQ,CAACC,IAAT,CAAcA,IAPlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,OAAO,SAAeE,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEoBjB,KAAK,CAACa,GAAN,CAAaX,OAAb,gBAFpB;;AAAA;AAEGY,UAAAA,QAFH;AAAA,4CAGIA,QAAQ,CAACC,IAAT,CAAcA,IAHlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASP,OAAO,SAAeG,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEoBlB,KAAK,CAACa,GAAN,CAAaX,OAAb,gBAFpB;;AAAA;AAEGY,UAAAA,QAFH;AAAA,4CAGIA,QAAQ,CAACC,IAAT,CAAcA,IAHlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* eslint-disable no-useless-catch */\nconst axios = require('axios');\n\nconst rootURL = 'http://localhost:10000';\n\n// login\nexport async function addUser(name) {\n  if (!name) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.post(`${rootURL}/login`, name);\n    // return response.data;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function updateBest(name, bestScore) {\n  if (!name) {\n    throw new Error('invalid user');\n  }\n\n  try {\n    await axios.put(`${rootURL}/user`, name, bestScore);\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function deleteUser(name) {\n  if (!name) {\n    throw new Error('invalid deletion');\n  }\n\n  try {\n    await axios.delete(`${rootURL}/delete`, name);\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function getTopUsers() {\n  try {\n    const response = await axios.get(`${rootURL}/leaders`);\n    return response.data.data;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function getBestScore(name) {\n  if (!name) {\n    throw new Error('invalid user');\n  }\n\n  try {\n    const response = await axios.get(`${rootURL}/user-best-score`, name);\n    return response.data.data;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function getBestUser() {\n  try {\n    const response = await axios.get(`${rootURL}/best-user`);\n    return response.data.data;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function getQuestions() {\n  try {\n    const response = await axios.get(`${rootURL}/questions`);\n    return response.data.data;\n  } catch (err) {\n    throw err;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}