{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar axios = require('axios');\n\nvar rootURL = 'http://localhost:10000';\nexport function login(name) {\n  return _regeneratorRuntime.async(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (name) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new Error('invalid username');\n\n        case 2:\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(axios.post(rootURL + \"/login\", name));\n\n        case 5:\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](2);\n          throw _context.t0;\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 7]], Promise);\n}\nexport function getQuestions() {\n  var response;\n  return _regeneratorRuntime.async(function getQuestions$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.get(rootURL + \"/questions\"));\n\n        case 3:\n          response = _context2.sent;\n          return _context2.abrupt(\"return\", response.data.data);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          throw _context2.t0;\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}","map":{"version":3,"sources":["/Users/ethanseto/Desktop/CIS350/hw5/hw5-backend-jiwon-ethan-1/client/modules/api.js"],"names":["axios","require","rootURL","login","name","Error","post","getQuestions","get","response","data"],"mappings":";;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,OAAO,GAAG,wBAAhB;AAGA,OAAO,SAAeC,KAAf,CAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cACAA,IADA;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAIC,KAAJ,CAAU,kBAAV,CAFH;;AAAA;AAAA;AAAA;AAAA,2CAMGL,KAAK,CAACM,IAAN,CAAcJ,OAAd,aAA+BE,IAA/B,CANH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,OAAO,SAAeG,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEoBP,KAAK,CAACQ,GAAN,CAAaN,OAAb,gBAFpB;;AAAA;AAEGO,UAAAA,QAFH;AAAA,4CAGIA,QAAQ,CAACC,IAAT,CAAcA,IAHlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* eslint-disable no-useless-catch */\nconst axios = require('axios');\n\nconst rootURL = 'http://localhost:10000';\n\n// login\nexport async function login(name) {\n  if (!name) {\n    throw new Error('invalid username');\n  }\n\n  try {\n    await axios.post(`${rootURL}/login`, name);\n    // return response.data;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function getQuestions() {\n  try {\n    const response = await axios.get(`${rootURL}/questions`);\n    return response.data.data;\n  } catch (err) {\n    throw err;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}