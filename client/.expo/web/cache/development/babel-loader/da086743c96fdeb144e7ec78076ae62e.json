{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { React, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Questions(_ref) {\n  var questionslist = _ref.questionslist,\n      score = _ref.score,\n      setScore = _ref.setScore,\n      setCorrect = _ref.setCorrect,\n      setNext = _ref.setNext;\n  var styles = StyleSheet.create({\n    img: {\n      width: 200,\n      height: 200,\n      resizeMode: 'contain'\n    },\n    question: {\n      textAlign: 'center',\n      fontSize: 20\n    },\n    container: {\n      alignItems: 'center'\n    }\n  });\n\n  var _useState = useState(questionslist[Math.floor(Math.random() * 10)]),\n      _useState2 = _slicedToArray(_useState, 2),\n      question = _useState2[0],\n      setQuestion = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      answer = _useState4[0],\n      setAnswer = _useState4[1];\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    setQuestion(questionslist[Math.floor(Math.random() * 10)]);\n\n    if (answer === question.correct) {\n      setCorrect(true);\n      setScore(score + 1);\n    } else {\n      setCorrect(false);\n    }\n\n    setNext('feedback');\n  };\n\n  return _jsx(View, {\n    children: _jsx(View, {\n      children: _jsx(View, {\n        children: _jsxs(View, {\n          style: styles.container,\n          children: [_jsx(Image, {\n            source: {\n              uri: question.img\n            },\n            style: styles.img\n          }), _jsx(Text, {\n            style: styles.question,\n            children: \"Who is this celebrity?\"\n          }), _jsxs(View, {\n            children: [_jsxs(View, {\n              children: [_jsx(Button, {\n                title: question.option1,\n                onPress: function onPress() {\n                  setAnswer('option1');\n                }\n              }), _jsx(Button, {\n                title: question.option2,\n                onPress: function onPress() {\n                  setAnswer('option2');\n                }\n              }), _jsx(Button, {\n                title: question.option3,\n                onPress: function onPress() {\n                  setAnswer('option3');\n                }\n              }), _jsx(Button, {\n                title: question.option4,\n                onPress: function onPress() {\n                  setAnswer('option4');\n                }\n              })]\n            }), _jsx(Button, {\n              title: \"Submit\",\n              style: styles.submit,\n              onPress: handleSubmit\n            })]\n          })]\n        })\n      })\n    })\n  });\n}\n\nexport default Questions;","map":{"version":3,"sources":["/Users/jiwonkang/Documents/Github/cis350/hw5-backend-jiwon-ethan-1/client/components/Questions.js"],"names":["React","useState","Questions","questionslist","score","setScore","setCorrect","setNext","styles","StyleSheet","create","img","width","height","resizeMode","question","textAlign","fontSize","container","alignItems","Math","floor","random","setQuestion","answer","setAnswer","handleSubmit","e","preventDefault","correct","uri","option1","option2","option3","option4","submit"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-filename-extension */\nimport { React, useState } from 'react';\nimport {\n  StyleSheet, Text, View, Button, Image,\n} from 'react-native';\n\n// passing questions as props to child component\nfunction Questions({\n  questionslist, score, setScore, setCorrect, setNext,\n}) {\n  const styles = StyleSheet.create({\n    img: {\n      width: 200,\n      height: 200,\n      resizeMode: 'contain',\n    },\n    question: {\n      textAlign: 'center',\n      fontSize: 20,\n    },\n    container: {\n      alignItems: 'center',\n    },\n  });\n\n  const [question, setQuestion] = useState(questionslist[Math.floor(Math.random() * 10)]);\n  const [answer, setAnswer] = useState('');\n  // const [counter, setCounter] = use\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setQuestion(questionslist[Math.floor(Math.random() * 10)]);\n\n    if (answer === question.correct) {\n      setCorrect(true);\n      setScore(score + 1);\n    } else {\n      setCorrect(false);\n    }\n\n    setNext('feedback');\n  };\n\n  return (\n    <View>\n      <View>\n        <View>\n          <View style={styles.container}>\n            <Image source={{ uri: question.img }} style={styles.img} />\n            <Text style={styles.question}>Who is this celebrity?</Text>\n            <View>\n              <View>\n                <Button\n                  title={question.option1}\n                  onPress={() => { setAnswer('option1'); }}\n                />\n                <Button\n                  title={question.option2}\n                  onPress={() => { setAnswer('option2'); }}\n                />\n                <Button\n                  title={question.option3}\n                  onPress={() => { setAnswer('option3'); }}\n                />\n                <Button\n                  title={question.option4}\n                  onPress={() => { setAnswer('option4'); }}\n                />\n              </View>\n              <Button title=\"Submit\" style={styles.submit} onPress={handleSubmit} />\n            </View>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}