{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nfunction addUser(name, bestScore) {\n  var userArray, array, k;\n  return _regeneratorRuntime.async(function addUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('players'));\n\n        case 3:\n          userArray = _context.sent;\n\n          if (!(userArray == null)) {\n            _context.next = 10;\n            break;\n          }\n\n          array = [{\n            user: name,\n            best: bestScore\n          }];\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('players', JSON.stringify(array)));\n\n        case 8:\n          _context.next = 18;\n          break;\n\n        case 10:\n          _context.t0 = JSON;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('players'));\n\n        case 13:\n          _context.t1 = _context.sent;\n          k = _context.t0.parse.call(_context.t0, _context.t1);\n          k.push({\n            user: name,\n            best: bestScore\n          });\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('players', JSON.stringify(k)));\n\n        case 18:\n          _context.next = 23;\n          break;\n\n        case 20:\n          _context.prev = 20;\n          _context.t2 = _context[\"catch\"](0);\n          throw new Error('adding user error');\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 20]], Promise);\n}\n\nfunction updateBest(name, score) {\n  var k, i;\n  return _regeneratorRuntime.async(function updateBest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.t0 = JSON;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('players'));\n\n        case 4:\n          _context2.t1 = _context2.sent;\n          k = _context2.t0.parse.call(_context2.t0, _context2.t1);\n\n          for (i = 0; i < k.length; i += 1) {\n            if (k[i].user === name) {\n              k[i].best = score;\n            }\n          }\n\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('players', JSON.stringify(k)));\n\n        case 9:\n          _context2.next = 14;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t2 = _context2[\"catch\"](0);\n          throw new Error('updating best score error');\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n}\n\nfunction existingUser(name) {\n  var g, k, i;\n  return _regeneratorRuntime.async(function existingUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('players'));\n\n        case 3:\n          g = _context3.sent;\n\n          if (!(g == null)) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", false);\n\n        case 6:\n          k = JSON.parse(g);\n          i = 0;\n\n        case 8:\n          if (!(i < k.length)) {\n            _context3.next = 14;\n            break;\n          }\n\n          if (!(k[i].user === name)) {\n            _context3.next = 11;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", true);\n\n        case 11:\n          i += 1;\n          _context3.next = 8;\n          break;\n\n        case 14:\n          return _context3.abrupt(\"return\", false);\n\n        case 17:\n          _context3.prev = 17;\n          _context3.t0 = _context3[\"catch\"](0);\n          throw new Error('existing user error');\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 17]], Promise);\n}\n\nfunction getBestScore(name) {\n  var k, i;\n  return _regeneratorRuntime.async(function getBestScore$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.t0 = JSON;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('players'));\n\n        case 4:\n          _context4.t1 = _context4.sent;\n          k = _context4.t0.parse.call(_context4.t0, _context4.t1);\n          i = 0;\n\n        case 7:\n          if (!(i < k.length)) {\n            _context4.next = 13;\n            break;\n          }\n\n          if (!(k[i].user === name)) {\n            _context4.next = 10;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", k[i].best);\n\n        case 10:\n          i += 1;\n          _context4.next = 7;\n          break;\n\n        case 13:\n          return _context4.abrupt(\"return\", 0);\n\n        case 16:\n          _context4.prev = 16;\n          _context4.t2 = _context4[\"catch\"](0);\n          throw new Error('getting best error');\n\n        case 19:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 16]], Promise);\n}\n\nfunction deleteUser(name) {\n  var k, newArray, i;\n  return _regeneratorRuntime.async(function deleteUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.t0 = JSON;\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('players'));\n\n        case 4:\n          _context5.t1 = _context5.sent;\n          k = _context5.t0.parse.call(_context5.t0, _context5.t1);\n          newArray = [];\n\n          for (i = 0; i < k.length; i += 1) {\n            if (k[i].user !== name) {\n              newArray.push({\n                user: k[i].user,\n                best: k[i].best\n              });\n            }\n          }\n\n          _context5.next = 10;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('players', JSON.stringify(newArray)));\n\n        case 10:\n          _context5.next = 15;\n          break;\n\n        case 12:\n          _context5.prev = 12;\n          _context5.t2 = _context5[\"catch\"](0);\n          throw new Error('delete user error');\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 12]], Promise);\n}\n\nfunction getTopUsers() {\n  var k, i, j, topUsers;\n  return _regeneratorRuntime.async(function getTopUsers$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.t0 = JSON;\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('players'));\n\n        case 4:\n          _context6.t1 = _context6.sent;\n          k = _context6.t0.parse.call(_context6.t0, _context6.t1);\n          k.sort(function (a, b) {\n            return b.best - a.best;\n          });\n          i = 0;\n          j = 0;\n          topUsers = [];\n\n          while (i < k.length) {\n            if (j < 10) {\n              topUsers.push({\n                user: k[j].user,\n                best: k[j].best\n              });\n            }\n\n            j += 1;\n            i += 1;\n          }\n\n          return _context6.abrupt(\"return\", topUsers);\n\n        case 14:\n          _context6.prev = 14;\n          _context6.t2 = _context6[\"catch\"](0);\n          throw new Error('get top error');\n\n        case 17:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 14]], Promise);\n}\n\nfunction getBestUser() {\n  var userArray, k, max, i;\n  return _regeneratorRuntime.async(function getBestUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('players'));\n\n        case 3:\n          userArray = _context7.sent;\n\n          if (!(userArray == null)) {\n            _context7.next = 6;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", {\n            user: '',\n            best: ''\n          });\n\n        case 6:\n          _context7.t0 = JSON;\n          _context7.next = 9;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('players'));\n\n        case 9:\n          _context7.t1 = _context7.sent;\n          k = _context7.t0.parse.call(_context7.t0, _context7.t1);\n          max = 0;\n\n          for (i = 0; i < k.length; i += 1) {\n            if (k[i].best > k[max].best) {\n              max = i;\n            }\n          }\n\n          if (k[max]) {\n            _context7.next = 15;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", {\n            user: '',\n            best: ''\n          });\n\n        case 15:\n          return _context7.abrupt(\"return\", k[max]);\n\n        case 18:\n          _context7.prev = 18;\n          _context7.t2 = _context7[\"catch\"](0);\n          throw new Error('get best user error');\n\n        case 21:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[0, 18]], Promise);\n}\n\nexport default {\n  addUser: addUser,\n  updateBest: updateBest,\n  getBestScore: getBestScore,\n  existingUser: existingUser,\n  deleteUser: deleteUser,\n  getTopUsers: getTopUsers,\n  getBestUser: getBestUser\n};","map":{"version":3,"sources":["/Users/ethanseto/Desktop/CIS350/hw5/hw5-backend-jiwon-ethan-1/client/modules/Storage.js"],"names":["AsyncStorage","addUser","name","bestScore","getItem","userArray","array","user","best","setItem","JSON","stringify","k","parse","push","Error","updateBest","score","i","length","existingUser","g","getBestScore","deleteUser","newArray","getTopUsers","sort","a","b","j","topUsers","getBestUser","max"],"mappings":"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","sourcesContent":["// import AsyncStorage\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nasync function addUser(name, bestScore) {\n  try {\n    const userArray = await AsyncStorage.getItem('players');\n    if (userArray == null) { // first user added to storage\n      const array = [{ user: name, best: bestScore }];\n      await AsyncStorage.setItem('players', JSON.stringify(array));\n    } else { // already has players\n      const k = JSON.parse(await AsyncStorage.getItem('players'));\n      k.push({ user: name, best: bestScore });\n      await AsyncStorage.setItem('players', JSON.stringify(k));\n    }\n  } catch (err) {\n    throw new Error('adding user error');\n  }\n}\n\nasync function updateBest(name, score) {\n  try {\n    const k = JSON.parse(await AsyncStorage.getItem('players'));\n    for (let i = 0; i < k.length; i += 1) {\n      if (k[i].user === name) {\n        k[i].best = score;\n      }\n    }\n    await AsyncStorage.setItem('players', JSON.stringify(k));\n  } catch (err) {\n    throw new Error('updating best score error');\n  }\n}\n\nasync function existingUser(name) {\n  try {\n    const g = await AsyncStorage.getItem('players');\n    if (g == null) {\n      return false;\n    }\n    const k = JSON.parse(g);\n    for (let i = 0; i < k.length; i += 1) {\n      if (k[i].user === name) {\n        return true;\n      }\n    }\n    return false;\n  } catch (err) {\n    throw new Error('existing user error');\n  }\n}\n\nasync function getBestScore(name) {\n  try {\n    const k = JSON.parse(await AsyncStorage.getItem('players'));\n    for (let i = 0; i < k.length; i += 1) {\n      if (k[i].user === name) {\n        return k[i].best;\n      }\n    }\n    return 0;\n  } catch (err) {\n    throw new Error('getting best error');\n  }\n}\n\nasync function deleteUser(name) {\n  try {\n    const k = JSON.parse(await AsyncStorage.getItem('players'));\n    const newArray = [];\n    for (let i = 0; i < k.length; i += 1) {\n      if (k[i].user !== name) {\n        newArray.push({ user: k[i].user, best: k[i].best });\n      }\n    }\n    await AsyncStorage.setItem('players', JSON.stringify(newArray));\n  } catch (err) {\n    throw new Error('delete user error');\n  }\n}\n\nasync function getTopUsers() {\n  try {\n    const k = JSON.parse(await AsyncStorage.getItem('players'));\n    k.sort((a, b) => b.best - a.best);\n    let i = 0;\n    let j = 0;\n    const topUsers = [];\n    while (i < k.length) {\n      if (j < 10) {\n        topUsers.push({ user: k[j].user, best: k[j].best });\n      }\n      j += 1;\n      i += 1;\n    }\n    return topUsers;\n  } catch (err) {\n    throw new Error('get top error');\n  }\n}\n\nasync function getBestUser() {\n  try {\n    const userArray = await AsyncStorage.getItem('players');\n    if (userArray == null) {\n      return { user: '', best: '' };\n    }\n    const k = JSON.parse(await AsyncStorage.getItem('players'));\n    let max = 0;\n    for (let i = 0; i < k.length; i += 1) {\n      if (k[i].best > k[max].best) {\n        max = i;\n      }\n    }\n    if (!k[max]) {\n      return { user: '', best: '' };\n    }\n    return k[max];\n  } catch (err) {\n    throw new Error('get best user error');\n  }\n}\n\nexport default {\n  addUser, updateBest, getBestScore, existingUser, deleteUser, getTopUsers, getBestUser,\n};\n"]},"metadata":{},"sourceType":"module"}